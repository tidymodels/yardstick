% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class-kap_weighted.R
\name{kap_weighted}
\alias{kap_weighted}
\alias{kap_weighted.data.frame}
\alias{kap_weighted_vec}
\title{Weighted Kappa}
\usage{
kap_weighted(data, ...)

\method{kap_weighted}{data.frame}(data, truth, estimate,
  weight = "linear", na_rm = TRUE, ...)

kap_weighted_vec(truth, estimate, weight = "linear", na_rm = TRUE, ...)
}
\arguments{
\item{data}{Either a \code{data.frame} containing the \code{truth} and \code{estimate}
columns, or a \code{table}/\code{matrix} where the true class results should be
in the columns of the table.}

\item{...}{Not currently used.}

\item{truth}{The column identifier for the true class results
(that is a \code{factor}). This should be an unquoted column name although
this argument is passed by expression and supports
\link[rlang:quasiquotation]{quasiquotation} (you can unquote column
names). For \code{_vec()} functions, a \code{factor} vector.}

\item{estimate}{The column identifier for the predicted class
results (that is also \code{factor}). As with \code{truth} this can be
specified different ways but the primary method is to use an
unquoted variable name. For \code{_vec()} functions, a \code{factor} vector.}

\item{na_rm}{A \code{logical} value indicating whether \code{NA}
values should be stripped before the computation proceeds.}
}
\value{
A \code{tibble} with columns \code{.metric}, \code{.estimator},
and \code{.estimate} and 1 row of values.

For grouped data frames, the number of rows returned will be the same as
the number of groups.

For \code{kap_weighted_vec()}, a single \code{numeric} value (or \code{NA}).
}
\description{
\code{kap_weighted} is a variant of \code{\link{kap}} with weights depending on
the distance of the estimate from the true value. To allow for calculation of
that distance, \code{truth} and \code{estimate} should be ordered factors. Note that
\code{kap_weighted} is identical to \code{\link{kap}} for two classes.
}
\section{Multiclass}{


Weighted kappa extends naturally to multiclass scenarios. Because of this,
macro and micro averaging are not implemented.
}

\examples{
# Two class
data("two_class_example")
kap_weighted(two_class_example, truth, predicted)

# Multiclass
library(dplyr)
data(hpc_cv)

hpc_cv \%>\%
  filter(Resample == "Fold01") \%>\%
  kap_weighted(obs, pred)

# Groups are respected
hpc_cv \%>\%
  group_by(Resample) \%>\%
  kap_weighted(obs, pred)

# Weighted macro averaging
hpc_cv \%>\%
  group_by(Resample) \%>\%
  kap_weighted(obs, pred, estimator = "macro_weighted")

# Vector version
kap_weighted_vec(two_class_example$truth, two_class_example$predicted)

# Making Class2 the "relevant" level
options(yardstick.event_first = FALSE)
kap_weighted_vec(two_class_example$truth, two_class_example$predicted)
options(yardstick.event_first = TRUE)

}
\references{
Cohen, J. (1968). "Weighed kappa: Nominal scale agreement with
provision for scaled disagreement or partial credit". \emph{Psychological
Bulletin}. 70 (4): 213-220.
}
\seealso{
Other class metrics: \code{\link{accuracy}},
  \code{\link{bal_accuracy}},
  \code{\link{detection_prevalence}}, \code{\link{f_meas}},
  \code{\link{j_index}}, \code{\link{kap}},
  \code{\link{mcc}}, \code{\link{npv}}, \code{\link{ppv}},
  \code{\link{precision}}, \code{\link{recall}},
  \code{\link{sens}}, \code{\link{spec}}
}
\author{
Jon Harmon
}
\concept{class metrics}
